generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}
 model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
model User {
  id String @id @default(cuid())
  name          String?
  email         String          @unique
  firstTimeUser Boolean @default(true)
  isPremium     Boolean @default(false)
  subscription_id String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  team  Team?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Session {
  sessionToken String   @unique @id
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}
model Team {
  id String @id @default(cuid())
  name      String?
  slug String @unique
  website   String?
  twitter String?
  description String @default("")
  ownerId    String @unique
  owner User @relation(fields: [ownerId], references: [id])
  jobs Job[]
}
enum Type {
  FULLTIME
  PARTTIME
  INTERNSHIP
  CONTRACT
}
model Job {
  id String @id @default(cuid())
  title String
  type Type @default(FULLTIME)
  location String?
  content String
  createdAt DateTime @default(now())
  applicants Applicant[]
  teamId String
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum Status {
  SUBMITTED
  UNDERREVIEW
  INTERVIEW
  OFFER
  REJECTED
  HIRED
}

model Applicant {
  id String @id @default(cuid())
  name String
  number BigInt
  motivation String @default("")
  email String
  linkedIn String?
  twitter String?
  github String?
  createdAt DateTime @default(now())
  status Status @default(SUBMITTED)
  resumeKey String
  jobId String
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}